{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "743al_YqG18O"
      },
      "source": [
        "___\n",
        "\n",
        "___\n",
        "# Python Review Exercises \n",
        "\n",
        "This is an exercise to test your understanding of Python Basics. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qVgwxOrxG18R"
      },
      "source": [
        "## Exercises\n",
        "\n",
        "Answer the questions or complete the tasks outlined in bold below, use the specific method described if applicable."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qfCI3dc6G18T"
      },
      "source": [
        "** What is 8 to the power of 4?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "uNhNF2oFG18U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5bf9c91a-80a5-4a8c-9ab8-632c58e910ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4096\n"
          ]
        }
      ],
      "source": [
        "x = 8\n",
        "y = 4\n",
        "z = 8**4\n",
        "print(z)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6q8LTFwkG18V"
      },
      "source": [
        "** Split this string:**\n",
        "\n",
        "    s = \"Hi there John!\"\n",
        "    \n",
        "**into a list. **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "collapsed": true,
        "id": "s3fTtjX_G18V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed8c101f-68a8-4615-842b-1e566e597020"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Hi', 'there', 'John!']"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "s = \"Hi there John!\"\n",
        "s.split()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "3g1BK_dQG18W"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IHoFgu5iG18W"
      },
      "source": [
        "** Given the variables:**\n",
        "\n",
        "    planet = \"Moon\"\n",
        "    diameter = 3474\n",
        "\n",
        "** Use .format() to print the following string: **\n",
        "\n",
        "    The diameter of Moon is 3474 kilometers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "collapsed": true,
        "id": "2o6RFqMKG18X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "852d4e0d-bbd9-4ad0-ec94-1584363ec518"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The diameter of the Moon is 3474 kilometers.\n"
          ]
        }
      ],
      "source": [
        "planet = \"Moon\"\n",
        "diameter = 3474\n",
        "print(\"The diameter of the {} is {} kilometers.\".format(planet, diameter))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nKXF54ByG18Y",
        "outputId": "37bf8bec-2400-4245-de78-477f3c4ac075"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The diameter of the Moon is 3474 kilometers.\n"
          ]
        }
      ],
      "source": [
        "planet = \"Moon\"\n",
        "diameter = 3474\n",
        "print(\"The diameter of the {} is {} kilometers.\".format(planet, diameter))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G-zPo2ADG18Y"
      },
      "source": [
        "** Given this nested list, use indexing to grab the word \"hello\" **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "collapsed": true,
        "id": "OIwdDK9kG18Z"
      },
      "outputs": [],
      "source": [
        "lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "KbiN0-_-G18Z",
        "outputId": "e104c98a-ded2-4ee0-9428-59faa636d14d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "lst[3][1][2][0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J7Bgxs31G18Z"
      },
      "source": [
        "** Given this nested dictionary grab the word \"hello\". Be prepared, this will be annoying/tricky **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "BjLgJzohG18a"
      },
      "outputs": [],
      "source": [
        "d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "DabTgeunG18a",
        "outputId": "782dfdb4-e038-4a8c-885b-61a7b7bc5e30",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "d['k1'][3]['tricky'][3]['target'][3]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m5v23TNHG18c"
      },
      "source": [
        "** What is the main difference between a tuple and a list? **\n",
        "\n",
        "> Indented block\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "collapsed": true,
        "id": "7ufeMwpEG18c"
      },
      "outputs": [],
      "source": [
        "# Tuple is immutable, which is opposed to lists which are mutable"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RbXzfLgcG18c"
      },
      "source": [
        "*** Create a function that grabs the email website domain from a string in the form: ***\n",
        "\n",
        "    user@domain.com\n",
        "    \n",
        "**So for example, passing \"user@domain.com\" would return: domain.com**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "collapsed": true,
        "id": "yJ63U5nQG18c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da3eef87-98fc-432e-a30f-544efb011d23"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "domain.com\n"
          ]
        }
      ],
      "source": [
        "def domainGet(email):\n",
        "    return email.split('@')[-1]\n",
        "\n",
        "print(get_domain('user@domain.com'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "FqZW5PAxG18c",
        "outputId": "89a884b0-d5e0-46d4-ac73-38f65d128b76",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'domain.com'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "domainGet('user@domain.com')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9TxNuGzbG18e"
      },
      "source": [
        "** Create a basic function that returns True if the word 'dog' is contained in the input string. Don't worry about edge cases like a punctuation being attached to the word dog, but do account for capitalization. **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "collapsed": true,
        "id": "zzOMlROLG18e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c97760cb-7d49-40bd-8074-3f83ed6ab0b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "def findDog(string):\n",
        "    return 'dog' in string.lower() \n",
        "\n",
        "print(findDog('The dog is contained')) # Output: True\n",
        "print(findDog('The cat is NOT contained')) # Output: False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "8Z4oMqKzG18e",
        "outputId": "cf671939-5877-4b35-9408-4a2dc7df4b7f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "findDog('Is there a dog here?')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bQthUGcRG18g"
      },
      "source": [
        "** Create a function that counts the number of times the word \"dog\" occurs in a string. Again ignore edge cases. **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "S22cW3TIG18g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ec9d807-ced4-4504-e7d1-fcc262b5f888"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ],
      "source": [
        "def countDog(string):\n",
        "    return string.lower().count('dog')\n",
        "\n",
        "print(countDog('The word dog is present this many times'))  # Count function built into python. I could have done via a counter like augmented assignment =+1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "0eJqh__oG18g",
        "outputId": "e2fd8a59-7b0b-4792-e97c-bd2bcb9dc003",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "countDog('This dog runs faster than the other dog dude!')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J4LUY2xhG18g"
      },
      "source": [
        "** Use lambda expressions and the filter() function to filter out words from a list that don't start with the letter 's'. For example:**\n",
        "\n",
        "    seq = ['soup','dog','salad','cat','great']\n",
        "\n",
        "**should be filtered down to:**\n",
        "\n",
        "    ['soup','salad']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "collapsed": true,
        "id": "nt9NB44uG18g"
      },
      "outputs": [],
      "source": [
        "seq = ['soup','dog','salad','cat','great']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "2vafacu5G18h",
        "outputId": "e94f29b4-89be-4d67-9961-abc9c8977cb3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['soup', 'salad']\n"
          ]
        }
      ],
      "source": [
        "seq = ['soup','dog','salad','cat','great']\n",
        "filteredSeq = filter(lambda word: word[0] == 's', seq)\n",
        "\n",
        "print(list(filteredSeq))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1fzDGr-mG18i"
      },
      "source": [
        "### Final Problem\n",
        "**You are driving a little too fast, and a police officer stops you. Write a function\n",
        "  to return one of 3 possible results: \"No ticket\", \"Small ticket\", or \"Big Ticket\". \n",
        "  If your speed is 60 or less, the result is \"No Ticket\". If speed is between 61 \n",
        "  and 80 inclusive, the result is \"Small Ticket\". If speed is 81 or more, the result is \"Big    Ticket\". Unless it is your birthday (encoded as a boolean value in the parameters of the function) -- on your birthday, your speed can be 5 higher in all \n",
        "  cases. **"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "collapsed": true,
        "id": "bNQimg_qG18i"
      },
      "outputs": [],
      "source": [
        "def caught_speeding(speed, is_birthday): # 2 Parameters\n",
        "    if is_birthday:\n",
        "        speed -= 5 # Augmented assignment / speed is 5 higher\n",
        "    if speed <= 60:\n",
        "        return \"No Ticket\"\n",
        "    elif 61 <= speed <= 80:\n",
        "        return \"Small Ticket\"\n",
        "    else:\n",
        "        return \"Big Ticket\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "fG2i-Bg5G18j",
        "outputId": "63c6720b-38f1-4274-dce0-c37501c4f00b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Small Ticket'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "caught_speeding(81,True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "aIpJMjRuG18j",
        "outputId": "ac3381f1-2897-4a76-c630-2e7d47730d45"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Big Ticket'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "caught_speeding(81,False)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "caught_speeding(59,False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "ofUmocsJLXY4",
        "outputId": "8056424c-e496-436d-96e7-3d71e45b3015"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'No Ticket'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "orXMHt9kG18k"
      },
      "source": [
        "# Great job!"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.2"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}